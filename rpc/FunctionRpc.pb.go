// Code generated by protoc-gen-go. DO NOT EDIT.
// source: FunctionRpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	FunctionRpc.proto

It has these top-level messages:
	StreamingMessage
	StartStream
	WorkerInitRequest
	WorkerInitResponse
	StatusResult
	WorkerHeartbeat
	WorkerTerminate
	FileChangeEventRequest
	WorkerActionResponse
	WorkerStatusRequest
	WorkerStatusResponse
	FunctionLoadRequest
	FunctionLoadResponse
	RpcFunctionMetadata
	InvocationRequest
	InvocationCancel
	InvocationResponse
	TypedData
	ParameterBinding
	BindingInfo
	RpcLog
	RpcException
	RpcHttp
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusResult_Status int32

const (
	StatusResult_Failure   StatusResult_Status = 0
	StatusResult_Success   StatusResult_Status = 1
	StatusResult_Cancelled StatusResult_Status = 2
)

var StatusResult_Status_name = map[int32]string{
	0: "Failure",
	1: "Success",
	2: "Cancelled",
}
var StatusResult_Status_value = map[string]int32{
	"Failure":   0,
	"Success":   1,
	"Cancelled": 2,
}

func (x StatusResult_Status) String() string {
	return proto.EnumName(StatusResult_Status_name, int32(x))
}
func (StatusResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

// https://msdn.microsoft.com/en-us/library/t6xf43e0(v=vs.110).aspx
type FileChangeEventRequest_Type int32

const (
	FileChangeEventRequest_Unknown FileChangeEventRequest_Type = 0
	FileChangeEventRequest_Created FileChangeEventRequest_Type = 1
	FileChangeEventRequest_Deleted FileChangeEventRequest_Type = 2
	FileChangeEventRequest_Changed FileChangeEventRequest_Type = 4
	FileChangeEventRequest_Renamed FileChangeEventRequest_Type = 8
	FileChangeEventRequest_All     FileChangeEventRequest_Type = 15
)

var FileChangeEventRequest_Type_name = map[int32]string{
	0:  "Unknown",
	1:  "Created",
	2:  "Deleted",
	4:  "Changed",
	8:  "Renamed",
	15: "All",
}
var FileChangeEventRequest_Type_value = map[string]int32{
	"Unknown": 0,
	"Created": 1,
	"Deleted": 2,
	"Changed": 4,
	"Renamed": 8,
	"All":     15,
}

func (x FileChangeEventRequest_Type) String() string {
	return proto.EnumName(FileChangeEventRequest_Type_name, int32(x))
}
func (FileChangeEventRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type WorkerActionResponse_Action int32

const (
	WorkerActionResponse_Restart WorkerActionResponse_Action = 0
	WorkerActionResponse_Reload  WorkerActionResponse_Action = 1
)

var WorkerActionResponse_Action_name = map[int32]string{
	0: "Restart",
	1: "Reload",
}
var WorkerActionResponse_Action_value = map[string]int32{
	"Restart": 0,
	"Reload":  1,
}

func (x WorkerActionResponse_Action) String() string {
	return proto.EnumName(WorkerActionResponse_Action_name, int32(x))
}
func (WorkerActionResponse_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

type BindingInfo_Direction int32

const (
	BindingInfo_in    BindingInfo_Direction = 0
	BindingInfo_out   BindingInfo_Direction = 1
	BindingInfo_inout BindingInfo_Direction = 2
)

var BindingInfo_Direction_name = map[int32]string{
	0: "in",
	1: "out",
	2: "inout",
}
var BindingInfo_Direction_value = map[string]int32{
	"in":    0,
	"out":   1,
	"inout": 2,
}

func (x BindingInfo_Direction) String() string {
	return proto.EnumName(BindingInfo_Direction_name, int32(x))
}
func (BindingInfo_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

// Matching ILogger semantics
// https://github.com/aspnet/Logging/blob/9506ccc3f3491488fe88010ef8b9eb64594abf95/src/Microsoft.Extensions.Logging/Logger.cs
type RpcLog_Level int32

const (
	RpcLog_Trace       RpcLog_Level = 0
	RpcLog_Debug       RpcLog_Level = 1
	RpcLog_Information RpcLog_Level = 2
	RpcLog_Warning     RpcLog_Level = 3
	RpcLog_Error       RpcLog_Level = 4
	RpcLog_Critical    RpcLog_Level = 5
	RpcLog_None        RpcLog_Level = 6
)

var RpcLog_Level_name = map[int32]string{
	0: "Trace",
	1: "Debug",
	2: "Information",
	3: "Warning",
	4: "Error",
	5: "Critical",
	6: "None",
}
var RpcLog_Level_value = map[string]int32{
	"Trace":       0,
	"Debug":       1,
	"Information": 2,
	"Warning":     3,
	"Error":       4,
	"Critical":    5,
	"None":        6,
}

func (x RpcLog_Level) String() string {
	return proto.EnumName(RpcLog_Level_name, int32(x))
}
func (RpcLog_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

type StreamingMessage struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*StreamingMessage_StartStream
	//	*StreamingMessage_WorkerInitRequest
	//	*StreamingMessage_WorkerInitResponse
	//	*StreamingMessage_WorkerHeartbeat
	//	*StreamingMessage_WorkerTerminate
	//	*StreamingMessage_WorkerStatusRequest
	//	*StreamingMessage_WorkerStatusResponse
	//	*StreamingMessage_FileChangeEventRequest
	//	*StreamingMessage_WorkerActionResponse
	//	*StreamingMessage_FunctionLoadRequest
	//	*StreamingMessage_FunctionLoadResponse
	//	*StreamingMessage_InvocationRequest
	//	*StreamingMessage_InvocationResponse
	//	*StreamingMessage_InvocationCancel
	//	*StreamingMessage_RpcLog
	Content isStreamingMessage_Content `protobuf_oneof:"content"`
}

func (m *StreamingMessage) Reset()                    { *m = StreamingMessage{} }
func (m *StreamingMessage) String() string            { return proto.CompactTextString(m) }
func (*StreamingMessage) ProtoMessage()               {}
func (*StreamingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isStreamingMessage_Content interface {
	isStreamingMessage_Content()
}

type StreamingMessage_StartStream struct {
	StartStream *StartStream `protobuf:"bytes,20,opt,name=start_stream,json=startStream,oneof"`
}
type StreamingMessage_WorkerInitRequest struct {
	WorkerInitRequest *WorkerInitRequest `protobuf:"bytes,17,opt,name=worker_init_request,json=workerInitRequest,oneof"`
}
type StreamingMessage_WorkerInitResponse struct {
	WorkerInitResponse *WorkerInitResponse `protobuf:"bytes,16,opt,name=worker_init_response,json=workerInitResponse,oneof"`
}
type StreamingMessage_WorkerHeartbeat struct {
	WorkerHeartbeat *WorkerHeartbeat `protobuf:"bytes,15,opt,name=worker_heartbeat,json=workerHeartbeat,oneof"`
}
type StreamingMessage_WorkerTerminate struct {
	WorkerTerminate *WorkerTerminate `protobuf:"bytes,14,opt,name=worker_terminate,json=workerTerminate,oneof"`
}
type StreamingMessage_WorkerStatusRequest struct {
	WorkerStatusRequest *WorkerStatusRequest `protobuf:"bytes,12,opt,name=worker_status_request,json=workerStatusRequest,oneof"`
}
type StreamingMessage_WorkerStatusResponse struct {
	WorkerStatusResponse *WorkerStatusResponse `protobuf:"bytes,13,opt,name=worker_status_response,json=workerStatusResponse,oneof"`
}
type StreamingMessage_FileChangeEventRequest struct {
	FileChangeEventRequest *FileChangeEventRequest `protobuf:"bytes,6,opt,name=file_change_event_request,json=fileChangeEventRequest,oneof"`
}
type StreamingMessage_WorkerActionResponse struct {
	WorkerActionResponse *WorkerActionResponse `protobuf:"bytes,7,opt,name=worker_action_response,json=workerActionResponse,oneof"`
}
type StreamingMessage_FunctionLoadRequest struct {
	FunctionLoadRequest *FunctionLoadRequest `protobuf:"bytes,8,opt,name=function_load_request,json=functionLoadRequest,oneof"`
}
type StreamingMessage_FunctionLoadResponse struct {
	FunctionLoadResponse *FunctionLoadResponse `protobuf:"bytes,9,opt,name=function_load_response,json=functionLoadResponse,oneof"`
}
type StreamingMessage_InvocationRequest struct {
	InvocationRequest *InvocationRequest `protobuf:"bytes,4,opt,name=invocation_request,json=invocationRequest,oneof"`
}
type StreamingMessage_InvocationResponse struct {
	InvocationResponse *InvocationResponse `protobuf:"bytes,5,opt,name=invocation_response,json=invocationResponse,oneof"`
}
type StreamingMessage_InvocationCancel struct {
	InvocationCancel *InvocationCancel `protobuf:"bytes,21,opt,name=invocation_cancel,json=invocationCancel,oneof"`
}
type StreamingMessage_RpcLog struct {
	RpcLog *RpcLog `protobuf:"bytes,2,opt,name=rpc_log,json=rpcLog,oneof"`
}

func (*StreamingMessage_StartStream) isStreamingMessage_Content()            {}
func (*StreamingMessage_WorkerInitRequest) isStreamingMessage_Content()      {}
func (*StreamingMessage_WorkerInitResponse) isStreamingMessage_Content()     {}
func (*StreamingMessage_WorkerHeartbeat) isStreamingMessage_Content()        {}
func (*StreamingMessage_WorkerTerminate) isStreamingMessage_Content()        {}
func (*StreamingMessage_WorkerStatusRequest) isStreamingMessage_Content()    {}
func (*StreamingMessage_WorkerStatusResponse) isStreamingMessage_Content()   {}
func (*StreamingMessage_FileChangeEventRequest) isStreamingMessage_Content() {}
func (*StreamingMessage_WorkerActionResponse) isStreamingMessage_Content()   {}
func (*StreamingMessage_FunctionLoadRequest) isStreamingMessage_Content()    {}
func (*StreamingMessage_FunctionLoadResponse) isStreamingMessage_Content()   {}
func (*StreamingMessage_InvocationRequest) isStreamingMessage_Content()      {}
func (*StreamingMessage_InvocationResponse) isStreamingMessage_Content()     {}
func (*StreamingMessage_InvocationCancel) isStreamingMessage_Content()       {}
func (*StreamingMessage_RpcLog) isStreamingMessage_Content()                 {}

func (m *StreamingMessage) GetContent() isStreamingMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StreamingMessage) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *StreamingMessage) GetStartStream() *StartStream {
	if x, ok := m.GetContent().(*StreamingMessage_StartStream); ok {
		return x.StartStream
	}
	return nil
}

func (m *StreamingMessage) GetWorkerInitRequest() *WorkerInitRequest {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerInitRequest); ok {
		return x.WorkerInitRequest
	}
	return nil
}

func (m *StreamingMessage) GetWorkerInitResponse() *WorkerInitResponse {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerInitResponse); ok {
		return x.WorkerInitResponse
	}
	return nil
}

func (m *StreamingMessage) GetWorkerHeartbeat() *WorkerHeartbeat {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerHeartbeat); ok {
		return x.WorkerHeartbeat
	}
	return nil
}

func (m *StreamingMessage) GetWorkerTerminate() *WorkerTerminate {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerTerminate); ok {
		return x.WorkerTerminate
	}
	return nil
}

func (m *StreamingMessage) GetWorkerStatusRequest() *WorkerStatusRequest {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerStatusRequest); ok {
		return x.WorkerStatusRequest
	}
	return nil
}

func (m *StreamingMessage) GetWorkerStatusResponse() *WorkerStatusResponse {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerStatusResponse); ok {
		return x.WorkerStatusResponse
	}
	return nil
}

func (m *StreamingMessage) GetFileChangeEventRequest() *FileChangeEventRequest {
	if x, ok := m.GetContent().(*StreamingMessage_FileChangeEventRequest); ok {
		return x.FileChangeEventRequest
	}
	return nil
}

func (m *StreamingMessage) GetWorkerActionResponse() *WorkerActionResponse {
	if x, ok := m.GetContent().(*StreamingMessage_WorkerActionResponse); ok {
		return x.WorkerActionResponse
	}
	return nil
}

func (m *StreamingMessage) GetFunctionLoadRequest() *FunctionLoadRequest {
	if x, ok := m.GetContent().(*StreamingMessage_FunctionLoadRequest); ok {
		return x.FunctionLoadRequest
	}
	return nil
}

func (m *StreamingMessage) GetFunctionLoadResponse() *FunctionLoadResponse {
	if x, ok := m.GetContent().(*StreamingMessage_FunctionLoadResponse); ok {
		return x.FunctionLoadResponse
	}
	return nil
}

func (m *StreamingMessage) GetInvocationRequest() *InvocationRequest {
	if x, ok := m.GetContent().(*StreamingMessage_InvocationRequest); ok {
		return x.InvocationRequest
	}
	return nil
}

func (m *StreamingMessage) GetInvocationResponse() *InvocationResponse {
	if x, ok := m.GetContent().(*StreamingMessage_InvocationResponse); ok {
		return x.InvocationResponse
	}
	return nil
}

func (m *StreamingMessage) GetInvocationCancel() *InvocationCancel {
	if x, ok := m.GetContent().(*StreamingMessage_InvocationCancel); ok {
		return x.InvocationCancel
	}
	return nil
}

func (m *StreamingMessage) GetRpcLog() *RpcLog {
	if x, ok := m.GetContent().(*StreamingMessage_RpcLog); ok {
		return x.RpcLog
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamingMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamingMessage_OneofMarshaler, _StreamingMessage_OneofUnmarshaler, _StreamingMessage_OneofSizer, []interface{}{
		(*StreamingMessage_StartStream)(nil),
		(*StreamingMessage_WorkerInitRequest)(nil),
		(*StreamingMessage_WorkerInitResponse)(nil),
		(*StreamingMessage_WorkerHeartbeat)(nil),
		(*StreamingMessage_WorkerTerminate)(nil),
		(*StreamingMessage_WorkerStatusRequest)(nil),
		(*StreamingMessage_WorkerStatusResponse)(nil),
		(*StreamingMessage_FileChangeEventRequest)(nil),
		(*StreamingMessage_WorkerActionResponse)(nil),
		(*StreamingMessage_FunctionLoadRequest)(nil),
		(*StreamingMessage_FunctionLoadResponse)(nil),
		(*StreamingMessage_InvocationRequest)(nil),
		(*StreamingMessage_InvocationResponse)(nil),
		(*StreamingMessage_InvocationCancel)(nil),
		(*StreamingMessage_RpcLog)(nil),
	}
}

func _StreamingMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamingMessage)
	// content
	switch x := m.Content.(type) {
	case *StreamingMessage_StartStream:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StartStream); err != nil {
			return err
		}
	case *StreamingMessage_WorkerInitRequest:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerInitRequest); err != nil {
			return err
		}
	case *StreamingMessage_WorkerInitResponse:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerInitResponse); err != nil {
			return err
		}
	case *StreamingMessage_WorkerHeartbeat:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerHeartbeat); err != nil {
			return err
		}
	case *StreamingMessage_WorkerTerminate:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerTerminate); err != nil {
			return err
		}
	case *StreamingMessage_WorkerStatusRequest:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerStatusRequest); err != nil {
			return err
		}
	case *StreamingMessage_WorkerStatusResponse:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerStatusResponse); err != nil {
			return err
		}
	case *StreamingMessage_FileChangeEventRequest:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileChangeEventRequest); err != nil {
			return err
		}
	case *StreamingMessage_WorkerActionResponse:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WorkerActionResponse); err != nil {
			return err
		}
	case *StreamingMessage_FunctionLoadRequest:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FunctionLoadRequest); err != nil {
			return err
		}
	case *StreamingMessage_FunctionLoadResponse:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FunctionLoadResponse); err != nil {
			return err
		}
	case *StreamingMessage_InvocationRequest:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InvocationRequest); err != nil {
			return err
		}
	case *StreamingMessage_InvocationResponse:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InvocationResponse); err != nil {
			return err
		}
	case *StreamingMessage_InvocationCancel:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InvocationCancel); err != nil {
			return err
		}
	case *StreamingMessage_RpcLog:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RpcLog); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamingMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _StreamingMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamingMessage)
	switch tag {
	case 20: // content.start_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StartStream)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_StartStream{msg}
		return true, err
	case 17: // content.worker_init_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerInitRequest)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerInitRequest{msg}
		return true, err
	case 16: // content.worker_init_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerInitResponse)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerInitResponse{msg}
		return true, err
	case 15: // content.worker_heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerHeartbeat)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerHeartbeat{msg}
		return true, err
	case 14: // content.worker_terminate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerTerminate)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerTerminate{msg}
		return true, err
	case 12: // content.worker_status_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerStatusRequest)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerStatusRequest{msg}
		return true, err
	case 13: // content.worker_status_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerStatusResponse)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerStatusResponse{msg}
		return true, err
	case 6: // content.file_change_event_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileChangeEventRequest)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_FileChangeEventRequest{msg}
		return true, err
	case 7: // content.worker_action_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WorkerActionResponse)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_WorkerActionResponse{msg}
		return true, err
	case 8: // content.function_load_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FunctionLoadRequest)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_FunctionLoadRequest{msg}
		return true, err
	case 9: // content.function_load_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FunctionLoadResponse)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_FunctionLoadResponse{msg}
		return true, err
	case 4: // content.invocation_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InvocationRequest)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_InvocationRequest{msg}
		return true, err
	case 5: // content.invocation_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InvocationResponse)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_InvocationResponse{msg}
		return true, err
	case 21: // content.invocation_cancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InvocationCancel)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_InvocationCancel{msg}
		return true, err
	case 2: // content.rpc_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RpcLog)
		err := b.DecodeMessage(msg)
		m.Content = &StreamingMessage_RpcLog{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamingMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamingMessage)
	// content
	switch x := m.Content.(type) {
	case *StreamingMessage_StartStream:
		s := proto.Size(x.StartStream)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerInitRequest:
		s := proto.Size(x.WorkerInitRequest)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerInitResponse:
		s := proto.Size(x.WorkerInitResponse)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerHeartbeat:
		s := proto.Size(x.WorkerHeartbeat)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerTerminate:
		s := proto.Size(x.WorkerTerminate)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerStatusRequest:
		s := proto.Size(x.WorkerStatusRequest)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerStatusResponse:
		s := proto.Size(x.WorkerStatusResponse)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_FileChangeEventRequest:
		s := proto.Size(x.FileChangeEventRequest)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_WorkerActionResponse:
		s := proto.Size(x.WorkerActionResponse)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_FunctionLoadRequest:
		s := proto.Size(x.FunctionLoadRequest)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_FunctionLoadResponse:
		s := proto.Size(x.FunctionLoadResponse)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_InvocationRequest:
		s := proto.Size(x.InvocationRequest)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_InvocationResponse:
		s := proto.Size(x.InvocationResponse)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_InvocationCancel:
		s := proto.Size(x.InvocationCancel)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingMessage_RpcLog:
		s := proto.Size(x.RpcLog)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StartStream struct {
	WorkerId string `protobuf:"bytes,2,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
}

func (m *StartStream) Reset()                    { *m = StartStream{} }
func (m *StartStream) String() string            { return proto.CompactTextString(m) }
func (*StartStream) ProtoMessage()               {}
func (*StartStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartStream) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type WorkerInitRequest struct {
	HostVersion string `protobuf:"bytes,1,opt,name=host_version,json=hostVersion" json:"host_version,omitempty"`
	// A map of host supported features/capabilities
	Capabilities map[string]string `protobuf:"bytes,2,rep,name=capabilities" json:"capabilities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// inform worker of supported categories and their levels
	// i.e. Worker = Verbose, Function.MyFunc = None
	LogCategories map[string]RpcLog_Level `protobuf:"bytes,3,rep,name=log_categories,json=logCategories" json:"log_categories,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=FunctionRpc.RpcLog_Level"`
}

func (m *WorkerInitRequest) Reset()                    { *m = WorkerInitRequest{} }
func (m *WorkerInitRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerInitRequest) ProtoMessage()               {}
func (*WorkerInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WorkerInitRequest) GetHostVersion() string {
	if m != nil {
		return m.HostVersion
	}
	return ""
}

func (m *WorkerInitRequest) GetCapabilities() map[string]string {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *WorkerInitRequest) GetLogCategories() map[string]RpcLog_Level {
	if m != nil {
		return m.LogCategories
	}
	return nil
}

type WorkerInitResponse struct {
	WorkerVersion string `protobuf:"bytes,1,opt,name=worker_version,json=workerVersion" json:"worker_version,omitempty"`
	// A map of worker supported features/capabilities
	Capabilities map[string]string `protobuf:"bytes,2,rep,name=capabilities" json:"capabilities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Result       *StatusResult     `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *WorkerInitResponse) Reset()                    { *m = WorkerInitResponse{} }
func (m *WorkerInitResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkerInitResponse) ProtoMessage()               {}
func (*WorkerInitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WorkerInitResponse) GetWorkerVersion() string {
	if m != nil {
		return m.WorkerVersion
	}
	return ""
}

func (m *WorkerInitResponse) GetCapabilities() map[string]string {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *WorkerInitResponse) GetResult() *StatusResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type StatusResult struct {
	Status    StatusResult_Status `protobuf:"varint,4,opt,name=status,enum=FunctionRpc.StatusResult_Status" json:"status,omitempty"`
	Result    string              `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Exception *RpcException       `protobuf:"bytes,2,opt,name=exception" json:"exception,omitempty"`
	// Captured logs or relevant details can use the logs property
	Logs []*RpcLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *StatusResult) Reset()                    { *m = StatusResult{} }
func (m *StatusResult) String() string            { return proto.CompactTextString(m) }
func (*StatusResult) ProtoMessage()               {}
func (*StatusResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatusResult) GetStatus() StatusResult_Status {
	if m != nil {
		return m.Status
	}
	return StatusResult_Failure
}

func (m *StatusResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *StatusResult) GetException() *RpcException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *StatusResult) GetLogs() []*RpcLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

// TODO: investigate grpc heartbeat - don't limit to grpc implemention
// Message is empty by design - Will add more fields in future if needed
type WorkerHeartbeat struct {
}

func (m *WorkerHeartbeat) Reset()                    { *m = WorkerHeartbeat{} }
func (m *WorkerHeartbeat) String() string            { return proto.CompactTextString(m) }
func (*WorkerHeartbeat) ProtoMessage()               {}
func (*WorkerHeartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Warning before killing the process after grace_period
// Worker self terminates ..no response on this
type WorkerTerminate struct {
	GracePeriod *google_protobuf.Duration `protobuf:"bytes,1,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
}

func (m *WorkerTerminate) Reset()                    { *m = WorkerTerminate{} }
func (m *WorkerTerminate) String() string            { return proto.CompactTextString(m) }
func (*WorkerTerminate) ProtoMessage()               {}
func (*WorkerTerminate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WorkerTerminate) GetGracePeriod() *google_protobuf.Duration {
	if m != nil {
		return m.GracePeriod
	}
	return nil
}

type FileChangeEventRequest struct {
	Type     FileChangeEventRequest_Type `protobuf:"varint,1,opt,name=type,enum=FunctionRpc.FileChangeEventRequest_Type" json:"type,omitempty"`
	FullPath string                      `protobuf:"bytes,2,opt,name=full_path,json=fullPath" json:"full_path,omitempty"`
	Name     string                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *FileChangeEventRequest) Reset()                    { *m = FileChangeEventRequest{} }
func (m *FileChangeEventRequest) String() string            { return proto.CompactTextString(m) }
func (*FileChangeEventRequest) ProtoMessage()               {}
func (*FileChangeEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FileChangeEventRequest) GetType() FileChangeEventRequest_Type {
	if m != nil {
		return m.Type
	}
	return FileChangeEventRequest_Unknown
}

func (m *FileChangeEventRequest) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

func (m *FileChangeEventRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WorkerActionResponse struct {
	Action WorkerActionResponse_Action `protobuf:"varint,1,opt,name=action,enum=FunctionRpc.WorkerActionResponse_Action" json:"action,omitempty"`
	Reason string                      `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *WorkerActionResponse) Reset()                    { *m = WorkerActionResponse{} }
func (m *WorkerActionResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkerActionResponse) ProtoMessage()               {}
func (*WorkerActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WorkerActionResponse) GetAction() WorkerActionResponse_Action {
	if m != nil {
		return m.Action
	}
	return WorkerActionResponse_Restart
}

func (m *WorkerActionResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type WorkerStatusRequest struct {
}

func (m *WorkerStatusRequest) Reset()                    { *m = WorkerStatusRequest{} }
func (m *WorkerStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerStatusRequest) ProtoMessage()               {}
func (*WorkerStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type WorkerStatusResponse struct {
}

func (m *WorkerStatusResponse) Reset()                    { *m = WorkerStatusResponse{} }
func (m *WorkerStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkerStatusResponse) ProtoMessage()               {}
func (*WorkerStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type FunctionLoadRequest struct {
	// unique function identifier (avoid name collisions, facilitate reload case)
	FunctionId string               `protobuf:"bytes,1,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Metadata   *RpcFunctionMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *FunctionLoadRequest) Reset()                    { *m = FunctionLoadRequest{} }
func (m *FunctionLoadRequest) String() string            { return proto.CompactTextString(m) }
func (*FunctionLoadRequest) ProtoMessage()               {}
func (*FunctionLoadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FunctionLoadRequest) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *FunctionLoadRequest) GetMetadata() *RpcFunctionMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type FunctionLoadResponse struct {
	FunctionId string        `protobuf:"bytes,1,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	Result     *StatusResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *FunctionLoadResponse) Reset()                    { *m = FunctionLoadResponse{} }
func (m *FunctionLoadResponse) String() string            { return proto.CompactTextString(m) }
func (*FunctionLoadResponse) ProtoMessage()               {}
func (*FunctionLoadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FunctionLoadResponse) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *FunctionLoadResponse) GetResult() *StatusResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type RpcFunctionMetadata struct {
	// TODO: do we want the host's name - the language worker might do a better job of assignment than the host
	Name       string                  `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Directory  string                  `protobuf:"bytes,1,opt,name=directory" json:"directory,omitempty"`
	ScriptFile string                  `protobuf:"bytes,2,opt,name=script_file,json=scriptFile" json:"script_file,omitempty"`
	EntryPoint string                  `protobuf:"bytes,3,opt,name=entry_point,json=entryPoint" json:"entry_point,omitempty"`
	Bindings   map[string]*BindingInfo `protobuf:"bytes,6,rep,name=bindings" json:"bindings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RpcFunctionMetadata) Reset()                    { *m = RpcFunctionMetadata{} }
func (m *RpcFunctionMetadata) String() string            { return proto.CompactTextString(m) }
func (*RpcFunctionMetadata) ProtoMessage()               {}
func (*RpcFunctionMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RpcFunctionMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RpcFunctionMetadata) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *RpcFunctionMetadata) GetScriptFile() string {
	if m != nil {
		return m.ScriptFile
	}
	return ""
}

func (m *RpcFunctionMetadata) GetEntryPoint() string {
	if m != nil {
		return m.EntryPoint
	}
	return ""
}

func (m *RpcFunctionMetadata) GetBindings() map[string]*BindingInfo {
	if m != nil {
		return m.Bindings
	}
	return nil
}

type InvocationRequest struct {
	InvocationId    string                `protobuf:"bytes,1,opt,name=invocation_id,json=invocationId" json:"invocation_id,omitempty"`
	FunctionId      string                `protobuf:"bytes,2,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	InputData       []*ParameterBinding   `protobuf:"bytes,3,rep,name=input_data,json=inputData" json:"input_data,omitempty"`
	TriggerMetadata map[string]*TypedData `protobuf:"bytes,4,rep,name=trigger_metadata,json=triggerMetadata" json:"trigger_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InvocationRequest) Reset()                    { *m = InvocationRequest{} }
func (m *InvocationRequest) String() string            { return proto.CompactTextString(m) }
func (*InvocationRequest) ProtoMessage()               {}
func (*InvocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InvocationRequest) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *InvocationRequest) GetFunctionId() string {
	if m != nil {
		return m.FunctionId
	}
	return ""
}

func (m *InvocationRequest) GetInputData() []*ParameterBinding {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *InvocationRequest) GetTriggerMetadata() map[string]*TypedData {
	if m != nil {
		return m.TriggerMetadata
	}
	return nil
}

type InvocationCancel struct {
	InvocationId string                    `protobuf:"bytes,2,opt,name=invocation_id,json=invocationId" json:"invocation_id,omitempty"`
	GracePeriod  *google_protobuf.Duration `protobuf:"bytes,1,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
}

func (m *InvocationCancel) Reset()                    { *m = InvocationCancel{} }
func (m *InvocationCancel) String() string            { return proto.CompactTextString(m) }
func (*InvocationCancel) ProtoMessage()               {}
func (*InvocationCancel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *InvocationCancel) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *InvocationCancel) GetGracePeriod() *google_protobuf.Duration {
	if m != nil {
		return m.GracePeriod
	}
	return nil
}

type InvocationResponse struct {
	InvocationId string              `protobuf:"bytes,1,opt,name=invocation_id,json=invocationId" json:"invocation_id,omitempty"`
	OutputData   []*ParameterBinding `protobuf:"bytes,2,rep,name=output_data,json=outputData" json:"output_data,omitempty"`
	ReturnValue  *TypedData          `protobuf:"bytes,4,opt,name=return_value,json=returnValue" json:"return_value,omitempty"`
	Result       *StatusResult       `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *InvocationResponse) Reset()                    { *m = InvocationResponse{} }
func (m *InvocationResponse) String() string            { return proto.CompactTextString(m) }
func (*InvocationResponse) ProtoMessage()               {}
func (*InvocationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *InvocationResponse) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *InvocationResponse) GetOutputData() []*ParameterBinding {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *InvocationResponse) GetReturnValue() *TypedData {
	if m != nil {
		return m.ReturnValue
	}
	return nil
}

func (m *InvocationResponse) GetResult() *StatusResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type TypedData struct {
	// Types that are valid to be assigned to Data:
	//	*TypedData_String_
	//	*TypedData_Json
	//	*TypedData_Bytes
	//	*TypedData_Stream
	//	*TypedData_Http
	//	*TypedData_Int
	//	*TypedData_Double
	Data isTypedData_Data `protobuf_oneof:"data"`
}

func (m *TypedData) Reset()                    { *m = TypedData{} }
func (m *TypedData) String() string            { return proto.CompactTextString(m) }
func (*TypedData) ProtoMessage()               {}
func (*TypedData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type isTypedData_Data interface {
	isTypedData_Data()
}

type TypedData_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,oneof"`
}
type TypedData_Json struct {
	Json string `protobuf:"bytes,2,opt,name=json,oneof"`
}
type TypedData_Bytes struct {
	Bytes []byte `protobuf:"bytes,3,opt,name=bytes,proto3,oneof"`
}
type TypedData_Stream struct {
	Stream []byte `protobuf:"bytes,4,opt,name=stream,proto3,oneof"`
}
type TypedData_Http struct {
	Http *RpcHttp `protobuf:"bytes,5,opt,name=http,oneof"`
}
type TypedData_Int struct {
	Int int64 `protobuf:"zigzag64,6,opt,name=int,oneof"`
}
type TypedData_Double struct {
	Double float64 `protobuf:"fixed64,7,opt,name=double,oneof"`
}

func (*TypedData_String_) isTypedData_Data() {}
func (*TypedData_Json) isTypedData_Data()    {}
func (*TypedData_Bytes) isTypedData_Data()   {}
func (*TypedData_Stream) isTypedData_Data()  {}
func (*TypedData_Http) isTypedData_Data()    {}
func (*TypedData_Int) isTypedData_Data()     {}
func (*TypedData_Double) isTypedData_Data()  {}

func (m *TypedData) GetData() isTypedData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TypedData) GetString_() string {
	if x, ok := m.GetData().(*TypedData_String_); ok {
		return x.String_
	}
	return ""
}

func (m *TypedData) GetJson() string {
	if x, ok := m.GetData().(*TypedData_Json); ok {
		return x.Json
	}
	return ""
}

func (m *TypedData) GetBytes() []byte {
	if x, ok := m.GetData().(*TypedData_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *TypedData) GetStream() []byte {
	if x, ok := m.GetData().(*TypedData_Stream); ok {
		return x.Stream
	}
	return nil
}

func (m *TypedData) GetHttp() *RpcHttp {
	if x, ok := m.GetData().(*TypedData_Http); ok {
		return x.Http
	}
	return nil
}

func (m *TypedData) GetInt() int64 {
	if x, ok := m.GetData().(*TypedData_Int); ok {
		return x.Int
	}
	return 0
}

func (m *TypedData) GetDouble() float64 {
	if x, ok := m.GetData().(*TypedData_Double); ok {
		return x.Double
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TypedData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TypedData_OneofMarshaler, _TypedData_OneofUnmarshaler, _TypedData_OneofSizer, []interface{}{
		(*TypedData_String_)(nil),
		(*TypedData_Json)(nil),
		(*TypedData_Bytes)(nil),
		(*TypedData_Stream)(nil),
		(*TypedData_Http)(nil),
		(*TypedData_Int)(nil),
		(*TypedData_Double)(nil),
	}
}

func _TypedData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TypedData)
	// data
	switch x := m.Data.(type) {
	case *TypedData_String_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case *TypedData_Json:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Json)
	case *TypedData_Bytes:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Bytes)
	case *TypedData_Stream:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Stream)
	case *TypedData_Http:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *TypedData_Int:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeZigzag64(uint64(x.Int))
	case *TypedData_Double:
		b.EncodeVarint(7<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case nil:
	default:
		return fmt.Errorf("TypedData.Data has unexpected type %T", x)
	}
	return nil
}

func _TypedData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TypedData)
	switch tag {
	case 1: // data.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &TypedData_String_{x}
		return true, err
	case 2: // data.json
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &TypedData_Json{x}
		return true, err
	case 3: // data.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &TypedData_Bytes{x}
		return true, err
	case 4: // data.stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &TypedData_Stream{x}
		return true, err
	case 5: // data.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RpcHttp)
		err := b.DecodeMessage(msg)
		m.Data = &TypedData_Http{msg}
		return true, err
	case 6: // data.int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.Data = &TypedData_Int{int64(x)}
		return true, err
	case 7: // data.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Data = &TypedData_Double{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TypedData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TypedData)
	// data
	switch x := m.Data.(type) {
	case *TypedData_String_:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *TypedData_Json:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Json)))
		n += len(x.Json)
	case *TypedData_Bytes:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Bytes)))
		n += len(x.Bytes)
	case *TypedData_Stream:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Stream)))
		n += len(x.Stream)
	case *TypedData_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TypedData_Int:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(x.Int<<1) ^ uint64((int64(x.Int) >> 63))))
	case *TypedData_Double:
		n += proto.SizeVarint(7<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ParameterBinding struct {
	Name string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data *TypedData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *ParameterBinding) Reset()                    { *m = ParameterBinding{} }
func (m *ParameterBinding) String() string            { return proto.CompactTextString(m) }
func (*ParameterBinding) ProtoMessage()               {}
func (*ParameterBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ParameterBinding) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterBinding) GetData() *TypedData {
	if m != nil {
		return m.Data
	}
	return nil
}

type BindingInfo struct {
	Type      string                `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Direction BindingInfo_Direction `protobuf:"varint,3,opt,name=direction,enum=FunctionRpc.BindingInfo_Direction" json:"direction,omitempty"`
}

func (m *BindingInfo) Reset()                    { *m = BindingInfo{} }
func (m *BindingInfo) String() string            { return proto.CompactTextString(m) }
func (*BindingInfo) ProtoMessage()               {}
func (*BindingInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BindingInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BindingInfo) GetDirection() BindingInfo_Direction {
	if m != nil {
		return m.Direction
	}
	return BindingInfo_in
}

type RpcLog struct {
	InvocationId string        `protobuf:"bytes,1,opt,name=invocation_id,json=invocationId" json:"invocation_id,omitempty"`
	Category     string        `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Level        RpcLog_Level  `protobuf:"varint,3,opt,name=level,enum=FunctionRpc.RpcLog_Level" json:"level,omitempty"`
	Message      string        `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	EventId      string        `protobuf:"bytes,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Exception    *RpcException `protobuf:"bytes,6,opt,name=exception" json:"exception,omitempty"`
	// json serialized property bag, or could use a type scheme like map<string, TypedData>
	Properties string `protobuf:"bytes,7,opt,name=properties" json:"properties,omitempty"`
}

func (m *RpcLog) Reset()                    { *m = RpcLog{} }
func (m *RpcLog) String() string            { return proto.CompactTextString(m) }
func (*RpcLog) ProtoMessage()               {}
func (*RpcLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RpcLog) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *RpcLog) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *RpcLog) GetLevel() RpcLog_Level {
	if m != nil {
		return m.Level
	}
	return RpcLog_Trace
}

func (m *RpcLog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RpcLog) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *RpcLog) GetException() *RpcException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *RpcLog) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

type RpcException struct {
	Source     string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	StackTrace string `protobuf:"bytes,1,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RpcException) Reset()                    { *m = RpcException{} }
func (m *RpcException) String() string            { return proto.CompactTextString(m) }
func (*RpcException) ProtoMessage()               {}
func (*RpcException) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RpcException) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RpcException) GetStackTrace() string {
	if m != nil {
		return m.StackTrace
	}
	return ""
}

func (m *RpcException) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// TODO - solidify this
type RpcHttp struct {
	Method     string            `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Url        string            `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Headers    map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body       *TypedData        `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	Params     map[string]string `protobuf:"bytes,10,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StatusCode string            `protobuf:"bytes,12,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Query      map[string]string `protobuf:"bytes,15,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsRaw      bool              `protobuf:"varint,16,opt,name=is_raw,json=isRaw" json:"is_raw,omitempty"`
}

func (m *RpcHttp) Reset()                    { *m = RpcHttp{} }
func (m *RpcHttp) String() string            { return proto.CompactTextString(m) }
func (*RpcHttp) ProtoMessage()               {}
func (*RpcHttp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RpcHttp) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RpcHttp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RpcHttp) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RpcHttp) GetBody() *TypedData {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *RpcHttp) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RpcHttp) GetStatusCode() string {
	if m != nil {
		return m.StatusCode
	}
	return ""
}

func (m *RpcHttp) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RpcHttp) GetIsRaw() bool {
	if m != nil {
		return m.IsRaw
	}
	return false
}

func init() {
	proto.RegisterType((*StreamingMessage)(nil), "FunctionRpc.StreamingMessage")
	proto.RegisterType((*StartStream)(nil), "FunctionRpc.StartStream")
	proto.RegisterType((*WorkerInitRequest)(nil), "FunctionRpc.WorkerInitRequest")
	proto.RegisterType((*WorkerInitResponse)(nil), "FunctionRpc.WorkerInitResponse")
	proto.RegisterType((*StatusResult)(nil), "FunctionRpc.StatusResult")
	proto.RegisterType((*WorkerHeartbeat)(nil), "FunctionRpc.WorkerHeartbeat")
	proto.RegisterType((*WorkerTerminate)(nil), "FunctionRpc.WorkerTerminate")
	proto.RegisterType((*FileChangeEventRequest)(nil), "FunctionRpc.FileChangeEventRequest")
	proto.RegisterType((*WorkerActionResponse)(nil), "FunctionRpc.WorkerActionResponse")
	proto.RegisterType((*WorkerStatusRequest)(nil), "FunctionRpc.WorkerStatusRequest")
	proto.RegisterType((*WorkerStatusResponse)(nil), "FunctionRpc.WorkerStatusResponse")
	proto.RegisterType((*FunctionLoadRequest)(nil), "FunctionRpc.FunctionLoadRequest")
	proto.RegisterType((*FunctionLoadResponse)(nil), "FunctionRpc.FunctionLoadResponse")
	proto.RegisterType((*RpcFunctionMetadata)(nil), "FunctionRpc.RpcFunctionMetadata")
	proto.RegisterType((*InvocationRequest)(nil), "FunctionRpc.InvocationRequest")
	proto.RegisterType((*InvocationCancel)(nil), "FunctionRpc.InvocationCancel")
	proto.RegisterType((*InvocationResponse)(nil), "FunctionRpc.InvocationResponse")
	proto.RegisterType((*TypedData)(nil), "FunctionRpc.TypedData")
	proto.RegisterType((*ParameterBinding)(nil), "FunctionRpc.ParameterBinding")
	proto.RegisterType((*BindingInfo)(nil), "FunctionRpc.BindingInfo")
	proto.RegisterType((*RpcLog)(nil), "FunctionRpc.RpcLog")
	proto.RegisterType((*RpcException)(nil), "FunctionRpc.RpcException")
	proto.RegisterType((*RpcHttp)(nil), "FunctionRpc.RpcHttp")
	proto.RegisterEnum("FunctionRpc.StatusResult_Status", StatusResult_Status_name, StatusResult_Status_value)
	proto.RegisterEnum("FunctionRpc.FileChangeEventRequest_Type", FileChangeEventRequest_Type_name, FileChangeEventRequest_Type_value)
	proto.RegisterEnum("FunctionRpc.WorkerActionResponse_Action", WorkerActionResponse_Action_name, WorkerActionResponse_Action_value)
	proto.RegisterEnum("FunctionRpc.BindingInfo_Direction", BindingInfo_Direction_name, BindingInfo_Direction_value)
	proto.RegisterEnum("FunctionRpc.RpcLog_Level", RpcLog_Level_name, RpcLog_Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FunctionRpc service

type FunctionRpcClient interface {
	EventStream(ctx context.Context, opts ...grpc.CallOption) (FunctionRpc_EventStreamClient, error)
}

type functionRpcClient struct {
	cc *grpc.ClientConn
}

func NewFunctionRpcClient(cc *grpc.ClientConn) FunctionRpcClient {
	return &functionRpcClient{cc}
}

func (c *functionRpcClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (FunctionRpc_EventStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FunctionRpc_serviceDesc.Streams[0], c.cc, "/FunctionRpc.FunctionRpc/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionRpcEventStreamClient{stream}
	return x, nil
}

type FunctionRpc_EventStreamClient interface {
	Send(*StreamingMessage) error
	Recv() (*StreamingMessage, error)
	grpc.ClientStream
}

type functionRpcEventStreamClient struct {
	grpc.ClientStream
}

func (x *functionRpcEventStreamClient) Send(m *StreamingMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *functionRpcEventStreamClient) Recv() (*StreamingMessage, error) {
	m := new(StreamingMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FunctionRpc service

type FunctionRpcServer interface {
	EventStream(FunctionRpc_EventStreamServer) error
}

func RegisterFunctionRpcServer(s *grpc.Server, srv FunctionRpcServer) {
	s.RegisterService(&_FunctionRpc_serviceDesc, srv)
}

func _FunctionRpc_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FunctionRpcServer).EventStream(&functionRpcEventStreamServer{stream})
}

type FunctionRpc_EventStreamServer interface {
	Send(*StreamingMessage) error
	Recv() (*StreamingMessage, error)
	grpc.ServerStream
}

type functionRpcEventStreamServer struct {
	grpc.ServerStream
}

func (x *functionRpcEventStreamServer) Send(m *StreamingMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *functionRpcEventStreamServer) Recv() (*StreamingMessage, error) {
	m := new(StreamingMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FunctionRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FunctionRpc.FunctionRpc",
	HandlerType: (*FunctionRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _FunctionRpc_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "FunctionRpc.proto",
}

func init() { proto.RegisterFile("FunctionRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xcd, 0x72, 0xdc, 0xc6,
	0x11, 0x5e, 0xec, 0x2e, 0xf7, 0xa7, 0x77, 0x49, 0x82, 0x43, 0x8a, 0xb5, 0x62, 0x2c, 0x89, 0x82,
	0x2b, 0x65, 0x96, 0xca, 0x05, 0x59, 0x74, 0xa5, 0x22, 0x3b, 0x4a, 0x62, 0x91, 0x94, 0xb2, 0x74,
	0x51, 0x31, 0x0d, 0x52, 0x52, 0xe2, 0x54, 0x19, 0x9e, 0x05, 0x86, 0x4b, 0x48, 0x58, 0x0c, 0x3c,
	0x18, 0x90, 0x61, 0xce, 0xae, 0x9c, 0x72, 0xcb, 0x1b, 0xe4, 0x98, 0xca, 0xbb, 0xe4, 0x90, 0x53,
	0x9e, 0x20, 0x79, 0x81, 0xe4, 0x98, 0x4a, 0xcd, 0x0f, 0xb0, 0xc0, 0x2e, 0xf8, 0x23, 0xfb, 0x86,
	0x6e, 0x7c, 0xfd, 0xa1, 0xd1, 0xdd, 0xd3, 0xdd, 0x00, 0xac, 0x3c, 0x4f, 0x23, 0x8f, 0x07, 0x34,
	0x72, 0x62, 0xcf, 0x8e, 0x19, 0xe5, 0x14, 0xf5, 0x0a, 0xaa, 0x8d, 0xbb, 0x63, 0x4a, 0xc7, 0x21,
	0x79, 0x28, 0x6f, 0x8d, 0xd2, 0x93, 0x87, 0x7e, 0xca, 0xb0, 0xb8, 0xa9, 0xc0, 0xd6, 0xff, 0xba,
	0x60, 0x1e, 0x71, 0x46, 0xf0, 0x24, 0x88, 0xc6, 0x2f, 0x48, 0x92, 0xe0, 0x31, 0x41, 0x77, 0x00,
	0x18, 0xf9, 0x36, 0x25, 0x09, 0x77, 0x03, 0x7f, 0x60, 0x6c, 0x1a, 0x5b, 0x5d, 0xa7, 0xab, 0x35,
	0xfb, 0x3e, 0xfa, 0x39, 0xf4, 0x13, 0x8e, 0x19, 0x77, 0x13, 0x69, 0x38, 0x58, 0xdb, 0x34, 0xb6,
	0x7a, 0xdb, 0x03, 0xbb, 0xe8, 0xca, 0x91, 0x00, 0x28, 0xe2, 0x61, 0xcd, 0xe9, 0x25, 0x53, 0x11,
	0x1d, 0xc2, 0xea, 0x39, 0x65, 0x6f, 0x09, 0x73, 0x83, 0x28, 0xe0, 0xae, 0xe6, 0x1d, 0xac, 0x48,
	0x96, 0xbb, 0x25, 0x96, 0xd7, 0x12, 0xb7, 0x1f, 0x05, 0xdc, 0x51, 0xa8, 0x61, 0xcd, 0x59, 0x39,
	0x9f, 0x55, 0xa2, 0x23, 0x58, 0x2b, 0x33, 0x26, 0x31, 0x8d, 0x12, 0x32, 0x30, 0x25, 0xe5, 0xbd,
	0x4b, 0x29, 0x15, 0x6c, 0x58, 0x73, 0xd0, 0xf9, 0x9c, 0x16, 0xed, 0x83, 0xa9, 0x49, 0x4f, 0x09,
	0x66, 0x7c, 0x44, 0x30, 0x1f, 0x2c, 0x4b, 0xc2, 0xf7, 0x2a, 0x08, 0x87, 0x19, 0x66, 0x58, 0x73,
	0x96, 0xcf, 0xcb, 0xaa, 0x02, 0x15, 0x27, 0x6c, 0x12, 0x44, 0x98, 0x93, 0xc1, 0xd2, 0xa5, 0x54,
	0xc7, 0x19, 0x66, 0x4a, 0x95, 0xab, 0xd0, 0x2b, 0xb8, 0xa5, 0xa9, 0x12, 0x8e, 0x79, 0x9a, 0xe4,
	0xe1, 0xeb, 0x4b, 0xbe, 0xcd, 0x0a, 0xbe, 0x23, 0x09, 0x9c, 0x06, 0x50, 0x47, 0xbf, 0xa4, 0x46,
	0xbf, 0x85, 0xf5, 0x59, 0x5e, 0x1d, 0xc4, 0x45, 0x49, 0x7c, 0xff, 0x0a, 0xe2, 0x3c, 0x8c, 0x6b,
	0xe7, 0x15, 0x7a, 0xf4, 0x0d, 0xdc, 0x3e, 0x09, 0x42, 0xe2, 0x7a, 0xa7, 0x38, 0x1a, 0x13, 0x97,
	0x9c, 0x91, 0x68, 0x9a, 0xf5, 0x96, 0x64, 0x7f, 0xbf, 0xc4, 0xfe, 0x3c, 0x08, 0xc9, 0xae, 0x04,
	0x3f, 0x13, 0xd8, 0xa9, 0xe7, 0xeb, 0x27, 0x95, 0x77, 0x0a, 0xce, 0x63, 0x49, 0x32, 0x75, 0xbe,
	0x7d, 0xa9, 0xf3, 0x4f, 0x95, 0x3c, 0xe7, 0x7c, 0x59, 0x2f, 0xe2, 0x7d, 0xa2, 0x6d, 0xdd, 0x90,
	0x62, 0x3f, 0x77, 0xbc, 0x53, 0x11, 0xef, 0xec, 0xfa, 0x80, 0x62, 0xbf, 0x10, 0xef, 0x93, 0x79,
	0xb5, 0x70, 0x79, 0x96, 0x57, 0xbb, 0xdc, 0xad, 0x70, 0xb9, 0x4c, 0x3c, 0x75, 0xf9, 0xa4, 0x42,
	0x8f, 0xbe, 0x00, 0x14, 0x44, 0x67, 0xd4, 0xc3, 0x3a, 0x14, 0xca, 0xdf, 0x66, 0xc5, 0xf1, 0xda,
	0xcf, 0x61, 0x85, 0xe3, 0x15, 0xcc, 0x2a, 0x91, 0x03, 0xab, 0x25, 0x42, 0xed, 0xe8, 0x42, 0xc5,
	0xe9, 0x2a, 0x32, 0x4e, 0x4f, 0x57, 0x30, 0xa7, 0x45, 0x07, 0x50, 0x78, 0x90, 0xeb, 0xe1, 0xc8,
	0x23, 0xe1, 0xe0, 0x96, 0x64, 0xbc, 0x73, 0x09, 0xe3, 0xae, 0x04, 0x0d, 0x6b, 0x8e, 0x19, 0xcc,
	0xe8, 0x90, 0x0d, 0x6d, 0x16, 0x7b, 0x6e, 0x48, 0xc7, 0x83, 0xba, 0xe4, 0x58, 0x2d, 0x71, 0x38,
	0xb1, 0x77, 0x40, 0xc7, 0xc3, 0x9a, 0xd3, 0x62, 0xf2, 0x6a, 0xa7, 0x0b, 0x6d, 0x8f, 0x46, 0x9c,
	0x44, 0xdc, 0x7a, 0x00, 0xbd, 0x42, 0xaf, 0x42, 0x3f, 0x82, 0x6e, 0xd6, 0x4a, 0x7c, 0xc9, 0xd5,
	0x75, 0x3a, 0xba, 0x39, 0xf8, 0xd6, 0x77, 0x0d, 0x58, 0x99, 0x6b, 0x49, 0xe8, 0x3e, 0xf4, 0x4f,
	0x69, 0xc2, 0xdd, 0x33, 0xc2, 0x92, 0x80, 0x46, 0xba, 0x5f, 0xf6, 0x84, 0xee, 0x95, 0x52, 0xa1,
	0x63, 0xe8, 0x7b, 0x38, 0xc6, 0xa3, 0x20, 0x0c, 0x78, 0x40, 0x92, 0x41, 0x7d, 0xb3, 0xb1, 0xd5,
	0xdb, 0xfe, 0xe8, 0xea, 0x5e, 0x67, 0xef, 0x16, 0x4c, 0x9e, 0x45, 0x9c, 0x5d, 0x38, 0x25, 0x16,
	0xf4, 0x1b, 0x58, 0x0a, 0xe9, 0xd8, 0xf5, 0x30, 0x27, 0x63, 0xca, 0x04, 0x6f, 0x43, 0xf2, 0x3e,
	0xba, 0x86, 0xf7, 0x80, 0x8e, 0x77, 0x73, 0x1b, 0x45, 0xbc, 0x18, 0x16, 0x75, 0x1b, 0xbf, 0x84,
	0x95, 0xb9, 0x87, 0x23, 0x13, 0x1a, 0x6f, 0xc9, 0x85, 0x7e, 0x3d, 0x71, 0x89, 0xd6, 0x60, 0xe1,
	0x0c, 0x87, 0x29, 0xd1, 0x81, 0x52, 0xc2, 0xa7, 0xf5, 0xc7, 0xc6, 0xc6, 0xef, 0x00, 0xcd, 0x3f,
	0xa5, 0x82, 0xe1, 0x61, 0x91, 0x61, 0x69, 0xfb, 0x76, 0x45, 0xda, 0xec, 0x03, 0x72, 0x46, 0xc2,
	0x02, 0xb9, 0xf5, 0xc7, 0x3a, 0xa0, 0xf9, 0x36, 0x8e, 0x7e, 0x0c, 0x4b, 0x3a, 0x75, 0xe5, 0x4c,
	0x2c, 0x2a, 0x6d, 0x96, 0x8b, 0x97, 0x95, 0xb9, 0x78, 0x74, 0xcd, 0x90, 0xb8, 0x36, 0x19, 0x8f,
	0xa0, 0xc5, 0x48, 0x92, 0x86, 0x7c, 0xd0, 0x90, 0x15, 0x78, 0x7b, 0x76, 0x1c, 0xaa, 0x96, 0x98,
	0x86, 0xdc, 0xd1, 0xc0, 0x1f, 0x1c, 0x65, 0xeb, 0x3f, 0x06, 0xf4, 0x8b, 0xcc, 0xe8, 0x31, 0xb4,
	0x54, 0xfb, 0x96, 0xc7, 0x7d, 0x69, 0xa6, 0x3d, 0x15, 0xa1, 0x99, 0xa0, 0xf1, 0x68, 0x3d, 0x77,
	0x5f, 0x3d, 0x59, 0x4b, 0xe8, 0xa7, 0xd0, 0x25, 0xbf, 0xf7, 0x48, 0x2c, 0x38, 0xf4, 0xd9, 0x9a,
	0x4b, 0xd2, 0xb3, 0x0c, 0xe0, 0x4c, 0xb1, 0xe8, 0x03, 0x68, 0x86, 0x74, 0x9c, 0x95, 0x64, 0xd5,
	0x79, 0x74, 0x24, 0xc0, 0x7a, 0x04, 0x2d, 0xe5, 0x0b, 0xea, 0x41, 0xfb, 0x39, 0x0e, 0xc2, 0x94,
	0x11, 0xb3, 0x26, 0x84, 0xa3, 0xd4, 0xf3, 0x48, 0x92, 0x98, 0x06, 0x5a, 0x84, 0xae, 0x3a, 0xe9,
	0x21, 0xf1, 0xcd, 0xba, 0xb5, 0x02, 0xcb, 0x33, 0x53, 0xd7, 0xfa, 0x22, 0x53, 0x4d, 0x47, 0xe5,
	0x13, 0xe8, 0x8f, 0x19, 0xf6, 0x88, 0x1b, 0x13, 0x16, 0x50, 0xb5, 0xc7, 0x08, 0xef, 0xd5, 0x46,
	0x64, 0x67, 0x1b, 0x91, 0xbd, 0xa7, 0x37, 0x22, 0xa7, 0x27, 0xe1, 0x87, 0x12, 0x6d, 0xfd, 0xd3,
	0x80, 0xf5, 0xea, 0x41, 0x84, 0x9e, 0x40, 0x93, 0x5f, 0xc4, 0x44, 0x12, 0x2e, 0x6d, 0x6f, 0xdd,
	0x60, 0x76, 0xd9, 0xc7, 0x17, 0x31, 0x71, 0xa4, 0x95, 0xe8, 0x30, 0x27, 0x69, 0x18, 0xba, 0x31,
	0xe6, 0xa7, 0x59, 0x87, 0x11, 0x8a, 0x43, 0xcc, 0x4f, 0x11, 0x82, 0x66, 0x84, 0x27, 0x44, 0xd6,
	0x50, 0xd7, 0x91, 0xd7, 0xd6, 0x21, 0x34, 0x85, 0xb9, 0x88, 0xc8, 0xcb, 0xe8, 0x6d, 0x44, 0xcf,
	0x23, 0x15, 0x9e, 0x5d, 0x46, 0x30, 0x27, 0xbe, 0x69, 0x08, 0x61, 0x8f, 0x84, 0x44, 0x08, 0x75,
	0x79, 0x47, 0x3a, 0xe0, 0x9b, 0x4d, 0x21, 0x38, 0x44, 0xb0, 0xf8, 0x66, 0x07, 0xb5, 0xa1, 0xf1,
	0x34, 0x0c, 0xcd, 0x65, 0xeb, 0xcf, 0x06, 0xac, 0x55, 0x4d, 0x41, 0xf4, 0x19, 0xb4, 0xd4, 0x04,
	0xad, 0x7c, 0xb7, 0x2a, 0x13, 0x5b, 0x8b, 0xda, 0x4e, 0xd5, 0x11, 0x4e, 0x74, 0xb1, 0xc8, 0x3a,
	0x12, 0x92, 0x75, 0x1f, 0x5a, 0x0a, 0xa9, 0x5c, 0x92, 0xfb, 0xa0, 0x59, 0x43, 0x00, 0x2d, 0x87,
	0x88, 0xf9, 0x67, 0x1a, 0xd6, 0x2d, 0x58, 0xad, 0x58, 0x58, 0xac, 0xf5, 0xcc, 0xd7, 0xf2, 0x5a,
	0x61, 0x71, 0x58, 0xad, 0x98, 0xb7, 0xe8, 0x1e, 0xf4, 0xf2, 0xc1, 0x9a, 0x2f, 0xaf, 0x90, 0xa9,
	0xf6, 0x7d, 0xf4, 0x04, 0x3a, 0x13, 0xc2, 0xb1, 0x8f, 0x39, 0xd6, 0x05, 0xbd, 0x39, 0x5b, 0x9c,
	0x99, 0xf8, 0x42, 0xe3, 0x9c, 0xdc, 0xc2, 0x7a, 0x03, 0x6b, 0x55, 0xc3, 0xf8, 0xfa, 0xc7, 0x4e,
	0xfb, 0x43, 0xfd, 0x86, 0xfd, 0xc1, 0xfa, 0x5b, 0x1d, 0x56, 0x2b, 0xbc, 0xc9, 0x8b, 0xa4, 0x39,
	0x2d, 0x12, 0xf4, 0x1e, 0x74, 0xfd, 0x80, 0x11, 0x8f, 0x53, 0x96, 0x35, 0x8f, 0xa9, 0x42, 0x78,
	0x97, 0x78, 0x2c, 0x88, 0xb9, 0x2b, 0x36, 0x28, 0x9d, 0x1a, 0x50, 0x2a, 0x51, 0xb1, 0x02, 0x40,
	0x44, 0xfb, 0x71, 0x63, 0x1a, 0x44, 0x5c, 0x97, 0x1f, 0x48, 0xd5, 0xa1, 0xd0, 0xa0, 0xcf, 0xa1,
	0x33, 0x0a, 0x22, 0x3f, 0x88, 0xc6, 0xc9, 0xa0, 0x25, 0x8f, 0xb4, 0x7d, 0x5d, 0xd4, 0xec, 0x1d,
	0x6d, 0xa0, 0xda, 0x65, 0x6e, 0xbf, 0xf1, 0x12, 0x16, 0x4b, 0xb7, 0x2a, 0x7a, 0x9e, 0x5d, 0xec,
	0x79, 0xb3, 0xdf, 0x16, 0xda, 0x78, 0x3f, 0x3a, 0xa1, 0xc5, 0x6e, 0xf8, 0x8f, 0x3a, 0xac, 0xcc,
	0x6d, 0x34, 0xe8, 0x7d, 0x58, 0x2c, 0x2c, 0x1a, 0x79, 0x6a, 0xfa, 0x53, 0xe5, 0xbe, 0x3f, 0x9b,
	0xbd, 0x7a, 0x45, 0xd1, 0x40, 0x10, 0xc5, 0x29, 0x77, 0x65, 0xd9, 0xa8, 0x9e, 0x56, 0xde, 0x53,
	0x0e, 0x31, 0xc3, 0x13, 0xc2, 0x09, 0xd3, 0xde, 0x39, 0x5d, 0x69, 0xb0, 0x27, 0x12, 0xf6, 0x35,
	0x98, 0x9c, 0x05, 0xe3, 0x31, 0x61, 0x6e, 0x5e, 0x7a, 0x4d, 0xc9, 0xf1, 0xf1, 0xd5, 0xfb, 0x98,
	0x7d, 0xac, 0xcc, 0xb2, 0x90, 0xaa, 0x48, 0x2e, 0xf3, 0xb2, 0x76, 0xe3, 0x2b, 0x58, 0xab, 0x02,
	0x56, 0xc4, 0xf5, 0xc3, 0x72, 0x5c, 0xd7, 0x4b, 0x8f, 0x17, 0x5d, 0xc6, 0x17, 0x0e, 0x17, 0xa3,
	0x9a, 0x82, 0x39, 0xbb, 0x82, 0xcd, 0xc7, 0xb4, 0x5e, 0x11, 0xd3, 0x1f, 0xd6, 0x7e, 0xff, 0x65,
	0x00, 0x9a, 0x5f, 0x26, 0x6f, 0x96, 0xcd, 0x5f, 0x40, 0x8f, 0xa6, 0x3c, 0xcf, 0x56, 0xfd, 0x26,
	0xd9, 0x02, 0x65, 0x21, 0xd3, 0xf5, 0x09, 0xf4, 0x19, 0xe1, 0x29, 0x8b, 0x5c, 0x15, 0xab, 0xe6,
	0x95, 0xb1, 0xea, 0x29, 0xec, 0x2b, 0x01, 0xfd, 0x1e, 0x5b, 0x80, 0xf5, 0x77, 0x03, 0xba, 0x39,
	0x1b, 0x1a, 0x88, 0x09, 0xce, 0x82, 0x68, 0xac, 0xde, 0x4c, 0xec, 0xac, 0x4a, 0x46, 0x6b, 0xd0,
	0x7c, 0x93, 0xf7, 0xd5, 0x61, 0xcd, 0x91, 0x12, 0x5a, 0x87, 0x85, 0xd1, 0x05, 0x97, 0xab, 0x9f,
	0xb1, 0xd5, 0x1f, 0xd6, 0x1c, 0x25, 0x6a, 0x1e, 0xf1, 0x75, 0xde, 0xd4, 0x37, 0xb4, 0x8c, 0x1e,
	0x40, 0xf3, 0x94, 0xf3, 0x58, 0xaf, 0xef, 0x6b, 0xb3, 0xa7, 0x78, 0xc8, 0x79, 0x2c, 0xd8, 0x05,
	0x06, 0x21, 0x68, 0x88, 0x76, 0x20, 0x3e, 0xd2, 0xd0, 0xb0, 0xe6, 0x08, 0x41, 0x30, 0xfb, 0x34,
	0x1d, 0x85, 0xea, 0xe3, 0xca, 0x10, 0xcc, 0x4a, 0xde, 0x69, 0x41, 0x53, 0xf6, 0x48, 0x07, 0xcc,
	0xd9, 0xf8, 0xe6, 0x3d, 0xcb, 0x28, 0xf4, 0xac, 0x07, 0x0a, 0x7f, 0x4d, 0x2d, 0x2a, 0xce, 0x3f,
	0x19, 0xd0, 0x2b, 0x9c, 0x7b, 0xc1, 0x27, 0x67, 0xb0, 0xaa, 0x3c, 0x35, 0x59, 0x3f, 0xcb, 0x7a,
	0xa0, 0x18, 0x60, 0x0d, 0x39, 0xc0, 0xac, 0xcb, 0x1a, 0x87, 0xbd, 0x97, 0x21, 0x9d, 0xa9, 0x91,
	0xf5, 0x01, 0x74, 0x73, 0x3d, 0x6a, 0x41, 0x3d, 0x10, 0xa3, 0xb6, 0x0d, 0x0d, 0x9a, 0x72, 0xd3,
	0x40, 0x5d, 0x58, 0x08, 0x22, 0x71, 0x59, 0xb7, 0xfe, 0x5d, 0x87, 0x96, 0xda, 0x62, 0x6e, 0x56,
	0x92, 0x1b, 0xd0, 0xd1, 0x6b, 0xfa, 0x45, 0x36, 0xf3, 0x33, 0x59, 0xec, 0xc0, 0xa1, 0x58, 0x71,
	0xb5, 0xcb, 0x57, 0xed, 0xc0, 0x12, 0x87, 0x06, 0xd0, 0x9e, 0xa8, 0x3f, 0x35, 0x7a, 0x04, 0x64,
	0x22, 0xba, 0x0d, 0x1d, 0xf5, 0x79, 0x1d, 0xf8, 0x32, 0xbf, 0x5d, 0xa7, 0x2d, 0xe5, 0x7d, 0xbf,
	0xbc, 0xc8, 0xb5, 0xde, 0x61, 0x91, 0xbb, 0x0b, 0x10, 0x33, 0x1a, 0x13, 0x26, 0xb7, 0xe5, 0xb6,
	0x6a, 0x8d, 0x53, 0x8d, 0xf5, 0x35, 0x2c, 0x48, 0xef, 0x44, 0x78, 0x8e, 0xc5, 0x09, 0x36, 0x6b,
	0xe2, 0x72, 0x8f, 0x8c, 0xd2, 0xb1, 0x69, 0xa0, 0x65, 0xe8, 0x89, 0x78, 0xb3, 0x89, 0x0c, 0x85,
	0xda, 0x4f, 0x5e, 0x63, 0x16, 0x05, 0xd1, 0xd8, 0x6c, 0x08, 0xe0, 0x33, 0xc6, 0x28, 0x33, 0x9b,
	0xa8, 0x0f, 0x9d, 0x5d, 0x16, 0xf0, 0xc0, 0xc3, 0xa1, 0xb9, 0x80, 0x3a, 0xd0, 0xfc, 0x35, 0x8d,
	0x88, 0xd9, 0xb2, 0x30, 0xf4, 0x8b, 0xae, 0x89, 0x0d, 0x23, 0xa1, 0x29, 0xf3, 0xb2, 0x25, 0x49,
	0x4b, 0x72, 0xc6, 0x71, 0xec, 0xbd, 0x75, 0xb9, 0x70, 0x22, 0x9b, 0xc0, 0x52, 0x25, 0xdd, 0x2a,
	0x86, 0xad, 0x5e, 0x0a, 0x9b, 0xf5, 0xdf, 0x06, 0xb4, 0x75, 0xe9, 0x0b, 0xfa, 0x09, 0xe1, 0xa7,
	0x34, 0xcb, 0xa3, 0x96, 0x44, 0x2f, 0x4d, 0x59, 0xa8, 0x2d, 0xc5, 0x25, 0xfa, 0x19, 0xb4, 0x4f,
	0x09, 0xf6, 0x09, 0xcb, 0x96, 0xdc, 0xfb, 0x55, 0x67, 0xc9, 0x1e, 0x2a, 0x8c, 0x6a, 0xdd, 0x99,
	0x85, 0xa8, 0xfd, 0x11, 0xf5, 0x2f, 0xae, 0xe9, 0x2d, 0x12, 0x23, 0xb6, 0xfa, 0x58, 0x9c, 0xa7,
	0x64, 0x00, 0xf2, 0x39, 0x9b, 0x95, 0xcf, 0x91, 0x47, 0x4e, 0x3f, 0x46, 0xe3, 0x75, 0x4c, 0x78,
	0x9a, 0xb8, 0x1e, 0xf5, 0x89, 0xfc, 0x47, 0xa4, 0x62, 0xc2, 0xd3, 0x64, 0x97, 0xfa, 0x04, 0xfd,
	0x04, 0x16, 0xbe, 0x4d, 0x09, 0xbb, 0x18, 0x2c, 0x4b, 0xe6, 0x7b, 0x95, 0xcc, 0x5f, 0x0a, 0x84,
	0x22, 0x56, 0x68, 0x74, 0x0b, 0x5a, 0x41, 0xe2, 0x32, 0x7c, 0x2e, 0x7f, 0xb1, 0x75, 0x9c, 0x85,
	0x20, 0x71, 0xf0, 0xf9, 0xc6, 0xa7, 0xd0, 0x2f, 0xbe, 0xed, 0x3b, 0x7d, 0x31, 0x7e, 0x02, 0xbd,
	0xc2, 0x1b, 0xbc, 0x93, 0xe9, 0x63, 0x80, 0xa9, 0x8b, 0xef, 0x62, 0xb9, 0xfd, 0x0d, 0x14, 0x7f,
	0x96, 0xa2, 0x2f, 0xa1, 0x27, 0xb7, 0x76, 0xfd, 0x2f, 0xe0, 0xce, 0x4c, 0xf3, 0x2e, 0xff, 0x25,
	0xdd, 0xb8, 0xfa, 0xb6, 0x55, 0xdb, 0x32, 0x3e, 0x32, 0x76, 0xbe, 0x33, 0xe0, 0xa1, 0x47, 0x27,
	0xf6, 0x24, 0xf0, 0x18, 0x4d, 0xe8, 0x09, 0xb7, 0xf1, 0x1f, 0x52, 0x46, 0xec, 0x73, 0x32, 0x7a,
	0x43, 0x47, 0x89, 0xad, 0x76, 0x30, 0x9b, 0xc5, 0x9e, 0xad, 0xab, 0x31, 0xd9, 0x59, 0xcc, 0x78,
	0x0f, 0xc5, 0x8c, 0x3c, 0x34, 0xbe, 0x6a, 0xb0, 0xd8, 0xfb, 0x4b, 0xbd, 0xe8, 0xea, 0x5f, 0xeb,
	0x1f, 0xbe, 0xc8, 0x19, 0x9f, 0x4a, 0xc6, 0xd7, 0x64, 0xf4, 0xb9, 0x60, 0x3c, 0x52, 0x8c, 0xbf,
	0x12, 0x94, 0xda, 0x97, 0x64, 0xd4, 0x92, 0xe3, 0xf6, 0xe3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x38, 0xa2, 0x51, 0x9a, 0x2f, 0x16, 0x00, 0x00,
}
